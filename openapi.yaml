openapi: 3.0.3
info:
  title: Intania Shop API
  description: |
    A RESTful API for the Intania Shop e-commerce platform built with Rust and Axum.
    This API provides endpoints for user management, product catalog, and shopping functionality.
  version: 0.1.0
  contact:
    name: ESC Chula
    url: https://github.com/esc-chula/intania-shop-api
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.intania-shop.com
    description: Production server

paths:
  /:
    get:
      summary: Root endpoint
      description: Returns a simple greeting message
      operationId: getRoot
      tags:
        - General
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: "intania-shop-api"

  /health:
    get:
      summary: Health check
      description: Check if the API is running and healthy
      operationId: getHealth
      tags:
        - General
      responses:
        "200":
          description: API is healthy
          content:
            text/plain:
              schema:
                type: string
                example: "ok"

  /register:
    post:
      summary: Register a new user
      description: Create a new user account
      operationId: registerUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationResponse"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict - user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /login:
    post:
      summary: Login user
      description: Authenticate user and return JWT token
      operationId: loginUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products:
    get:
      summary: List products
      description: Get a paginated list of products
      operationId: listProducts
      tags:
        - Products
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of items per page (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductErrorResponse"

    post:
      summary: Create a new product
      description: Add a new product to the catalog
      operationId: createProduct
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewProduct"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductErrorResponse"
        "409":
          description: Conflict - product already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductErrorResponse"

  /products/search:
    get:
      summary: Search products
      description: Search products by name
      operationId: searchProducts
      tags:
        - Products
      parameters:
        - name: q
          in: query
          description: Search query (product name)
          required: true
          schema:
            type: string
            minLength: 1
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of items per page (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSearchResponse"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductErrorResponse"

  /products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      operationId: getProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductErrorResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductErrorResponse"

    put:
      summary: Update product
      description: Update an existing product
      operationId: updateProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProduct"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductErrorResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductErrorResponse"

    delete:
      summary: Delete product
      description: Delete a product from the catalog
      operationId: deleteProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "204":
          description: Product deleted successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductErrorResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductErrorResponse"

components:
  schemas:
    # User schemas
    UserRole:
      type: string
      enum: [USER, ADMIN]
      description: User role in the system

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique user identifier
        full_name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        password_hash:
          type: string
          description: Hashed password (internal use)
        phone:
          type: string
          nullable: true
          description: User's phone number
        role:
          $ref: "#/components/schemas/UserRole"
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
      required:
        - id
        - full_name
        - email
        - password_hash
        - role
        - created_at

    AbstractUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique user identifier
        full_name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        role:
          $ref: "#/components/schemas/UserRole"
      required:
        - id
        - full_name
        - email
        - role

    UserRegistration:
      type: object
      properties:
        full_name:
          type: string
          description: User's full name
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password
          minLength: 6
        confirm_password:
          type: string
          description: Password confirmation
        phone:
          type: string
          nullable: true
          description: User's phone number
          maxLength: 20
      required:
        - full_name
        - email
        - password
        - confirm_password

    RegistrationResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/AbstractUser"
        message:
          type: string
          description: Success message
      required:
        - user
        - message

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/AbstractUser"
        token:
          type: string
          description: JWT authentication token
        message:
          type: string
          description: Success message
      required:
        - user
        - token
        - message

    # Product schemas
    ProductStatus:
      type: string
      enum: [PREORDER, IN_STOCK, OUT_OF_STOCK]
      description: Product availability status

    Product:
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          description: Unique product identifier
        name:
          type: string
          description: Product name
          maxLength: 150
        description:
          type: string
          nullable: true
          description: Product description
        base_price:
          type: string
          description: Product base price (as decimal string)
          pattern: '^\d+\.\d{2}$'
        status:
          $ref: "#/components/schemas/ProductStatus"
      required:
        - product_id
        - name
        - base_price
        - status

    NewProduct:
      type: object
      properties:
        name:
          type: string
          description: Product name
          minLength: 1
          maxLength: 150
        description:
          type: string
          nullable: true
          description: Product description
        base_price:
          type: string
          description: Product base price (as decimal string)
          pattern: '^\d+\.\d{2}$'
        status:
          $ref: "#/components/schemas/ProductStatus"
          nullable: true
          description: Product status (defaults to IN_STOCK if not provided)
      required:
        - name
        - base_price

    UpdateProduct:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: Product name
          minLength: 1
          maxLength: 150
        description:
          type: string
          nullable: true
          description: Product description
        base_price:
          type: string
          nullable: true
          description: Product base price (as decimal string)
          pattern: '^\d+\.\d{2}$'
        status:
          $ref: "#/components/schemas/ProductStatus"
          nullable: true
          description: Product status

    ProductListItem:
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          description: Unique product identifier
        name:
          type: string
          description: Product name
        base_price:
          type: string
          description: Product base price (as decimal string)
        status:
          $ref: "#/components/schemas/ProductStatus"
      required:
        - product_id
        - name
        - base_price
        - status

    ProductListResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductListItem"
        total:
          type: integer
          format: int64
          description: Total number of products
        page:
          type: integer
          description: Current page number
        page_size:
          type: integer
          description: Number of items per page
        total_pages:
          type: integer
          description: Total number of pages
      required:
        - products
        - total
        - page
        - page_size
        - total_pages

    # Response wrappers
    ProductResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
        data:
          $ref: "#/components/schemas/Product"
      required:
        - success
        - data

    ProductSearchResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductListItem"
      required:
        - success
        - data

    # Error schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            type:
              type: string
              description: Error type
              enum:
                [
                  NOT_FOUND,
                  BAD_REQUEST,
                  INTERNAL_SERVER_ERROR,
                  UNAUTHORIZED,
                  FORBIDDEN,
                ]
            message:
              type: string
              description: Error message
          required:
            - type
            - message
      required:
        - error

    ProductErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
          example: false
        error:
          type: string
          description: Error message
      required:
        - success
        - error

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

tags:
  - name: General
    description: General API endpoints
  - name: Users
    description: User management endpoints
  - name: Products
    description: Product catalog management endpoints

security:
  - BearerAuth: []
